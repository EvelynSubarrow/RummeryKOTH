org 0x7C00   ; add 0x7C00 to label addresses
 bits 16      ; tell the assembler we want 16 bit code
 
   mov ax, 0  ; set up segments
   mov ds, ax
   mov es, ax
   mov ss, ax     ; setup stack
   mov sp, 0x7C00 ; stack grows downwards from 0x7C00
 
   mov si, welcome
   call print_string
   
    ; Load stage 2 to memory.
    mov ah, 0x02
    mov al, 4 ; number of sectors
    ; This may not be necessary as many BIOS setup is as an initial state.
    mov dl, 0x80
    mov ch, 0
    mov dh, 0
    mov cl, 2
    mov bx, stage2
    int 0x13

    jmp stage2
	;mov si, [qr]
	;call print_string
   
   hlt
   welcome db 0x0D, 0x0A, 0
   ;welcome db "Sejchas ya vam zayavlyayu, chto vy provalilis!", 0x0D, 0x0A, 0
   read_failure_str db 'RF', 0x0D, 0x0A, 0
 
 ;'Tamara wrote a bootloader... because she could. No good reason.', 0x0D, 0x0A, 0
 
 ; ================
 ; calls start here
 ; ================
 
 print_string:
   lodsb        ; grab a byte from SI
 
   or al, al  ; logical or AL by itself
   jz .done   ; if the result is zero, get out
 
   mov ah, 0x0E
   int 0x10      ; otherwise, print out the character!
 
   jmp print_string
 
 .done:
   ret
   
 
   times 510-($-$$) db 0
   dw 0AA55h ; some BIOSes require this signature
   stage2:
	;mov si, qr
	;call ps16
	; move cursor to 0x0
	mov ah, 0x02
	mov bh, 0
	mov dh, 0
	mov dl, 0
	int 0x10
	
	mov ax, 012h ; set VESA video mode pls
	mov bx, 0x12   ; I'd like 640x480x8, please
	int 0x10
	
	;mov bh, 0 ; page number
	;mov cx, 20 ; x
	;mov dx, 20 ; y
	;mov al, 5 ; a colour
	;mov ah, 0ch ; set pixel pls thx
	;int 0x10 ; do teh thing
	
	
	mov si, qr
	call ps16
	
	hlt
qr db 0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB, ' The Internet', 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB, ' The hate machine', 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB, ' The love machine', 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB, ' The machine powered by', 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB, '          many machines', 0x0D, 0x0A
db 0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB, ' We are all part of it',0x0D, 0x0A
db 0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB, ' Helping it grow',0x0D, 0x0A
db 0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB, ' And helping it grow on us', 0x0D, 0x0A
db 0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB, '           R U M M E R Y', 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB, ' braenaru       ens       goodkat', 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB, ' joepie91     lysobit       nij', 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB, '   nsh     skyhighatrist   tamara', 0x0D, 0x0A
db 0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0xDB,0xDB,0x20,0x20,0x20,0x20,0x20,0x20,0xDB,0xDB,0x20,0x20,0xDB,0xDB,0xDB,0xDB, 0x0D, 0x0A
db 0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB,0xDB, "       ----------------", 0x0D, 0x0A
db "                                                    ~Rummery's pinvoke queen~", 0x00

 ps16:
   lodsb        ; grab a byte from SI
 
   or al, al  ; logical or AL by itself
   jz .ps_done   ; if the result is zero, get out
 
   ;mov ah, 0x0E
   ;int 0x10      ; otherwise, print out the character!
    mov ax, si
	dec ax ; si will be one past what al now is
	sub ax, qr
	;mov bx, 639
	;div ax
	;mov cx, dx
	;mov dx, ax
    mov cx, ax
   	mov bh, 0 ; page number
	;mov cx, 20 ; x
	mov dx, 0 ; y
	;mov al, 5 ; a colour
	mov ah, 0ch ; set pixel pls thx
	int 0x10 ; do teh thing
   
   
   jmp ps16
 
 .ps_done:
   ret

   times ((0x1000) - ($ - $$)) db 0
